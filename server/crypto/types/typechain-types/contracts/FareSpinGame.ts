/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace FareSpinGame {
  export type EntryStruct = {
    amount: BigNumberish;
    gameModeId: BigNumberish;
    pickedNumber: BigNumberish;
  };

  export type EntryStructOutput = [BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    gameModeId: BigNumber;
    pickedNumber: BigNumber;
  };
}

export interface FareSpinGameInterface extends utils.Interface {
  functions: {
    "GAME_EDGE_CEILING()": FunctionFragment;
    "batchEntryMap(uint256,uint256)": FunctionFragment;
    "eliminators(uint256,uint256)": FunctionFragment;
    "entryMap(uint256,uint256)": FunctionFragment;
    "fareToken()": FunctionFragment;
    "gameModes(uint256)": FunctionFragment;
    "getBatchEntryCount(uint256)": FunctionFragment;
    "getCurrentEntryId()": FunctionFragment;
    "getCurrentGameModeId()": FunctionFragment;
    "getCurrentRoundId()": FunctionFragment;
    "getEntryCount(uint256)": FunctionFragment;
    "getIsEliminator(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "placeBatchEntry((uint256,uint256,uint256)[])": FunctionFragment;
    "rawFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRandomNumber()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setFareToken(address)": FunctionFragment;
    "setGameEdgeFloor(uint256,uint256)": FunctionFragment;
    "setGameMode(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setGameModeEntryLimit(uint256,uint256)": FunctionFragment;
    "setGameModeIsActive(uint256,bool)": FunctionFragment;
    "setGameModeMinMax(uint256,uint256,uint256)": FunctionFragment;
    "setTreasuryAddress(address)": FunctionFragment;
    "setTreasuryMint(uint256)": FunctionFragment;
    "settleBatchEntry(uint256,uint256)": FunctionFragment;
    "testFulfillRandomness(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "treasuryMint()": FunctionFragment;
    "vrfCoordinator()": FunctionFragment;
    "vrfMap(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GAME_EDGE_CEILING"
      | "batchEntryMap"
      | "eliminators"
      | "entryMap"
      | "fareToken"
      | "gameModes"
      | "getBatchEntryCount"
      | "getCurrentEntryId"
      | "getCurrentGameModeId"
      | "getCurrentRoundId"
      | "getEntryCount"
      | "getIsEliminator"
      | "owner"
      | "paused"
      | "placeBatchEntry"
      | "rawFulfillRandomness"
      | "renounceOwnership"
      | "requestRandomNumber"
      | "rounds"
      | "setFareToken"
      | "setGameEdgeFloor"
      | "setGameMode"
      | "setGameModeEntryLimit"
      | "setGameModeIsActive"
      | "setGameModeMinMax"
      | "setTreasuryAddress"
      | "setTreasuryMint"
      | "settleBatchEntry"
      | "testFulfillRandomness"
      | "transferOwnership"
      | "treasuryAddress"
      | "treasuryMint"
      | "vrfCoordinator"
      | "vrfMap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GAME_EDGE_CEILING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchEntryMap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eliminators",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entryMap",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fareToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameModes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchEntryCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentEntryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGameModeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsEliminator",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBatchEntry",
    values: [FareSpinGame.EntryStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFareToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameEdgeFloor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameMode",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameModeEntryLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameModeIsActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameModeMinMax",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBatchEntry",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testFulfillRandomness",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vrfMap", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "GAME_EDGE_CEILING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchEntryMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eliminators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fareToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameModes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBatchEntryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEntryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGameModeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsEliminator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeBatchEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameEdgeFloor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameModeEntryLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameModeIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameModeMinMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleBatchEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrfMap", data: BytesLike): Result;

  events: {
    "EntrySettled(uint256,uint256,address,uint256,bool)": EventFragment;
    "EntrySubmitted(uint256,uint256,address,uint256)": EventFragment;
    "GameModeUpdated(uint256)": EventFragment;
    "NFTWon(uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RandomNumberRequested(bytes32)": EventFragment;
    "RoundConcluded(uint256,bytes32,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntrySettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntrySubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameModeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTWon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RandomNumberRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundConcluded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EntrySettledEventObject {
  roundId: BigNumber;
  batchId: BigNumber;
  player: string;
  entryId: BigNumber;
  hasWon: boolean;
}
export type EntrySettledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, boolean],
  EntrySettledEventObject
>;

export type EntrySettledEventFilter = TypedEventFilter<EntrySettledEvent>;

export interface EntrySubmittedEventObject {
  roundId: BigNumber;
  batchId: BigNumber;
  player: string;
  entryId: BigNumber;
}
export type EntrySubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  EntrySubmittedEventObject
>;

export type EntrySubmittedEventFilter = TypedEventFilter<EntrySubmittedEvent>;

export interface GameModeUpdatedEventObject {
  gameModeId: BigNumber;
}
export type GameModeUpdatedEvent = TypedEvent<
  [BigNumber],
  GameModeUpdatedEventObject
>;

export type GameModeUpdatedEventFilter = TypedEventFilter<GameModeUpdatedEvent>;

export interface NFTWonEventObject {
  roundId: BigNumber;
  batchId: BigNumber;
  player: string;
}
export type NFTWonEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  NFTWonEventObject
>;

export type NFTWonEventFilter = TypedEventFilter<NFTWonEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RandomNumberRequestedEventObject {
  vrfRequestId: string;
}
export type RandomNumberRequestedEvent = TypedEvent<
  [string],
  RandomNumberRequestedEventObject
>;

export type RandomNumberRequestedEventFilter =
  TypedEventFilter<RandomNumberRequestedEvent>;

export interface RoundConcludedEventObject {
  roundId: BigNumber;
  vrfRequestId: string;
  randomNum: BigNumber;
  randomEliminator: BigNumber;
}
export type RoundConcludedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  RoundConcludedEventObject
>;

export type RoundConcludedEventFilter = TypedEventFilter<RoundConcludedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface FareSpinGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FareSpinGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GAME_EDGE_CEILING(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchEntryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        entryId: BigNumber;
        player: string;
        settled: boolean;
        totalEntryAmount: BigNumber;
        totalWinAmount: BigNumber;
      }
    >;

    eliminators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        gameModeId: BigNumber;
        recordedEdgeFloor: BigNumber;
        isEliminator: boolean;
      }
    >;

    entryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        gameModeId: BigNumber;
        pickedNumber: BigNumber;
      }
    >;

    fareToken(overrides?: CallOverrides): Promise<[string]>;

    gameModes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        cardinality: BigNumber;
        gameEdgeFloor: BigNumber;
        mintMultiplier: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        entryLimit: BigNumber;
        isActive: boolean;
      }
    >;

    getBatchEntryCount(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getCurrentEntryId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getCurrentGameModeId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getCurrentRoundId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { id: BigNumber }>;

    getEntryCount(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getIsEliminator(
      roundId: BigNumberish,
      gameModeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isEliminator: boolean }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    placeBatchEntry(
      entries: FareSpinGame.EntryStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        randomNum: BigNumber;
        randomEliminator: BigNumber;
        vrfRequestId: string;
      }
    >;

    setFareToken(
      _fareTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameEdgeFloor(
      gameModeId: BigNumberish,
      _gameEdgeFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameMode(
      cardinality: BigNumberish,
      gameEdgeFloor: BigNumberish,
      mintMultiplier: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameModeEntryLimit(
      gameModeId: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameModeIsActive(
      gameModeId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGameModeMinMax(
      gameModeId: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryMint(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleBatchEntry(
      roundId: BigNumberish,
      batchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    testFulfillRandomness(
      vrfRequestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    treasuryMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    vrfCoordinator(overrides?: CallOverrides): Promise<[string]>;

    vrfMap(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  GAME_EDGE_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

  batchEntryMap(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean, BigNumber, BigNumber] & {
      entryId: BigNumber;
      player: string;
      settled: boolean;
      totalEntryAmount: BigNumber;
      totalWinAmount: BigNumber;
    }
  >;

  eliminators(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      gameModeId: BigNumber;
      recordedEdgeFloor: BigNumber;
      isEliminator: boolean;
    }
  >;

  entryMap(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      gameModeId: BigNumber;
      pickedNumber: BigNumber;
    }
  >;

  fareToken(overrides?: CallOverrides): Promise<string>;

  gameModes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      cardinality: BigNumber;
      gameEdgeFloor: BigNumber;
      mintMultiplier: BigNumber;
      minAmount: BigNumber;
      maxAmount: BigNumber;
      entryLimit: BigNumber;
      isActive: boolean;
    }
  >;

  getBatchEntryCount(
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentEntryId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentGameModeId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  getEntryCount(
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsEliminator(
    roundId: BigNumberish,
    gameModeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  placeBatchEntry(
    entries: FareSpinGame.EntryStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rawFulfillRandomness(
    requestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestRandomNumber(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      randomNum: BigNumber;
      randomEliminator: BigNumber;
      vrfRequestId: string;
    }
  >;

  setFareToken(
    _fareTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameEdgeFloor(
    gameModeId: BigNumberish,
    _gameEdgeFloor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameMode(
    cardinality: BigNumberish,
    gameEdgeFloor: BigNumberish,
    mintMultiplier: BigNumberish,
    minAmount: BigNumberish,
    maxAmount: BigNumberish,
    entryLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameModeEntryLimit(
    gameModeId: BigNumberish,
    entryLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameModeIsActive(
    gameModeId: BigNumberish,
    isActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGameModeMinMax(
    gameModeId: BigNumberish,
    minAmount: BigNumberish,
    maxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryAddress(
    _treasuryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryMint(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleBatchEntry(
    roundId: BigNumberish,
    batchId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  testFulfillRandomness(
    vrfRequestId: BytesLike,
    randomness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  treasuryMint(overrides?: CallOverrides): Promise<BigNumber>;

  vrfCoordinator(overrides?: CallOverrides): Promise<string>;

  vrfMap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    GAME_EDGE_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

    batchEntryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean, BigNumber, BigNumber] & {
        entryId: BigNumber;
        player: string;
        settled: boolean;
        totalEntryAmount: BigNumber;
        totalWinAmount: BigNumber;
      }
    >;

    eliminators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        gameModeId: BigNumber;
        recordedEdgeFloor: BigNumber;
        isEliminator: boolean;
      }
    >;

    entryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        gameModeId: BigNumber;
        pickedNumber: BigNumber;
      }
    >;

    fareToken(overrides?: CallOverrides): Promise<string>;

    gameModes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        cardinality: BigNumber;
        gameEdgeFloor: BigNumber;
        mintMultiplier: BigNumber;
        minAmount: BigNumber;
        maxAmount: BigNumber;
        entryLimit: BigNumber;
        isActive: boolean;
      }
    >;

    getBatchEntryCount(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGameModeId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryCount(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsEliminator(
      roundId: BigNumberish,
      gameModeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    placeBatchEntry(
      entries: FareSpinGame.EntryStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRandomNumber(overrides?: CallOverrides): Promise<string>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        randomNum: BigNumber;
        randomEliminator: BigNumber;
        vrfRequestId: string;
      }
    >;

    setFareToken(
      _fareTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameEdgeFloor(
      gameModeId: BigNumberish,
      _gameEdgeFloor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameMode(
      cardinality: BigNumberish,
      gameEdgeFloor: BigNumberish,
      mintMultiplier: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameModeEntryLimit(
      gameModeId: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameModeIsActive(
      gameModeId: BigNumberish,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameModeMinMax(
      gameModeId: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryMint(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBatchEntry(
      roundId: BigNumberish,
      batchId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    testFulfillRandomness(
      vrfRequestId: BytesLike,
      randomness: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    treasuryMint(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<string>;

    vrfMap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EntrySettled(uint256,uint256,address,uint256,bool)"(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null,
      entryId?: null,
      hasWon?: null
    ): EntrySettledEventFilter;
    EntrySettled(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null,
      entryId?: null,
      hasWon?: null
    ): EntrySettledEventFilter;

    "EntrySubmitted(uint256,uint256,address,uint256)"(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null,
      entryId?: null
    ): EntrySubmittedEventFilter;
    EntrySubmitted(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null,
      entryId?: null
    ): EntrySubmittedEventFilter;

    "GameModeUpdated(uint256)"(
      gameModeId?: BigNumberish | null
    ): GameModeUpdatedEventFilter;
    GameModeUpdated(
      gameModeId?: BigNumberish | null
    ): GameModeUpdatedEventFilter;

    "NFTWon(uint256,uint256,address)"(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null
    ): NFTWonEventFilter;
    NFTWon(
      roundId?: BigNumberish | null,
      batchId?: BigNumberish | null,
      player?: string | null
    ): NFTWonEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RandomNumberRequested(bytes32)"(
      vrfRequestId?: BytesLike | null
    ): RandomNumberRequestedEventFilter;
    RandomNumberRequested(
      vrfRequestId?: BytesLike | null
    ): RandomNumberRequestedEventFilter;

    "RoundConcluded(uint256,bytes32,uint256,uint256)"(
      roundId?: BigNumberish | null,
      vrfRequestId?: BytesLike | null,
      randomNum?: null,
      randomEliminator?: null
    ): RoundConcludedEventFilter;
    RoundConcluded(
      roundId?: BigNumberish | null,
      vrfRequestId?: BytesLike | null,
      randomNum?: null,
      randomEliminator?: null
    ): RoundConcludedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    GAME_EDGE_CEILING(overrides?: CallOverrides): Promise<BigNumber>;

    batchEntryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    eliminators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fareToken(overrides?: CallOverrides): Promise<BigNumber>;

    gameModes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBatchEntryCount(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentEntryId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentGameModeId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryCount(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsEliminator(
      roundId: BigNumberish,
      gameModeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    placeBatchEntry(
      entries: FareSpinGame.EntryStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setFareToken(
      _fareTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameEdgeFloor(
      gameModeId: BigNumberish,
      _gameEdgeFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameMode(
      cardinality: BigNumberish,
      gameEdgeFloor: BigNumberish,
      mintMultiplier: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameModeEntryLimit(
      gameModeId: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameModeIsActive(
      gameModeId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGameModeMinMax(
      gameModeId: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryMint(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleBatchEntry(
      roundId: BigNumberish,
      batchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    testFulfillRandomness(
      vrfRequestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryMint(overrides?: CallOverrides): Promise<BigNumber>;

    vrfCoordinator(overrides?: CallOverrides): Promise<BigNumber>;

    vrfMap(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GAME_EDGE_CEILING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchEntryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    eliminators(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entryMap(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameModes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBatchEntryCount(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentEntryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentGameModeId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRoundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntryCount(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsEliminator(
      roundId: BigNumberish,
      gameModeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    placeBatchEntry(
      entries: FareSpinGame.EntryStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomness(
      requestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestRandomNumber(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFareToken(
      _fareTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameEdgeFloor(
      gameModeId: BigNumberish,
      _gameEdgeFloor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameMode(
      cardinality: BigNumberish,
      gameEdgeFloor: BigNumberish,
      mintMultiplier: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameModeEntryLimit(
      gameModeId: BigNumberish,
      entryLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameModeIsActive(
      gameModeId: BigNumberish,
      isActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGameModeMinMax(
      gameModeId: BigNumberish,
      minAmount: BigNumberish,
      maxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryAddress(
      _treasuryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryMint(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleBatchEntry(
      roundId: BigNumberish,
      batchId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    testFulfillRandomness(
      vrfRequestId: BytesLike,
      randomness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfCoordinator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vrfMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
